# Note: This workflow file is for now standalone what you need to correctly build and release a binary of a project using github actions,
#       Later this functionality should be implemented in a standalone Github Action. However, for now this action is very easy and leaves the user with best customizability to just use the plain action file.
name: Build and Release Binary
on:
  workflow_call:
  workflow_dispatch:
# (Uncomment the following lines for standalone use of this workflow file)
#  push:
#    branches: [main]
  
jobs:
  build_release:
    name: Build the PlatformIO Project
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
     - uses: actions/checkout@main
     - uses: actions/cache@main
       with:
        path: |
            ~/.cache/pip
            ~/.platformio/.cache
        key: ${{ runner.os }}-pio
     - uses: actions/setup-python@main
       with:
          python-version: '3.11'
     - name: Install PlatformIO
       run: |
        python -m pip install --upgrade pip
        pip install --upgrade platformio
     - name: Build the PlatformIO Project
       run: platformio run
     - name: Get version data
       id: versioninfo
       run: |
        echo "extract branch name from github_ref '${{ github.ref }}'"
        declare branchname=$(echo "${{ github.ref }}" | cut -d'/' -f 3-)
        echo "clean branch name = $branchname"
        echo "extract commit short hash : $(git rev-parse --short HEAD)"
        declare commithash=$(git rev-parse --short HEAD)
        echo "extract build timestamp"
        declare buildtimestamp=$(date "+%Y-%b-%d-%H:%M:%S")
        echo "buildtimestamp = $buildtimestamp"
        declare fulltag=$(git describe --tag $(git rev-parse --verify refs/remotes/origin/main))
        echo "fulltag = [$fulltag]"
        declare versiontag=$(echo $fulltag | cut -d'-' -f1)
        echo "extract SemVer numbers from version tag [$versiontag]"
        declare -i lastmajordigit=$(echo $versiontag | cut -c 1- | cut -d'.' -f1)
        echo "lastmajordigit = $lastmajordigit"
        declare -i lastminordigit=$(echo $versiontag | cut -c 1- | cut -d'.' -f2)
        echo "lastminordigit = $lastminordigit"
        declare -i lastpatchdigit=$(echo $versiontag | cut -c 1- | cut -d'.' -f3)
        echo "lastpatchdigit = $lastpatchdigit"
        declare lastversion="v$lastmajordigit.$lastminordigit.$lastpatchdigit"
        echo "output variables to GitHub Actions"
        echo "branchname=$branchname" >> $GITHUB_OUTPUT
        echo "lastmajordigit=$lastmajordigit" >> $GITHUB_OUTPUT
        echo "lastminordigit=$lastminordigit" >> $GITHUB_OUTPUT
        echo "lastpatchdigit=$lastpatchdigit" >> $GITHUB_OUTPUT
        echo "commithash=$commithash" >> $GITHUB_OUTPUT
        echo "buildtimestamp=$buildtimestamp" >> $GITHUB_OUTPUT
        echo "lastversion=$lastversion" >> $GITHUB_OUTPUT

     - name: Determine which version to build
       id: selectversion
       run: |
        echo "Triggered from Branch : ${{ steps.versioninfo.outputs.branchname }}"
        echo "Commit hash           : ${{ steps.versioninfo.outputs.commithash }}"
        echo "Last version          : ${{ steps.versioninfo.outputs.lastversion }}"
        echo "  Major               : ${{ steps.versioninfo.outputs.lastmajordigit }}"
        echo "  Minor               : ${{ steps.versioninfo.outputs.lastminordigit }}"
        echo "  Patch               : ${{ steps.versioninfo.outputs.lastpatchdigit }}"
        echo "Triggered from merge on ${{ steps.versioninfo.outputs.branchname }} branch with commit title : ${{ github.event.head_commit.message }}"
        if [[ "${{ github.event_name }}" == "pull_request" ]]; then
          declare message="${{ github.event.pull_request.title }}"
        else
          declare message="${{ github.event.head_commit.message }}"
        fi
        if [[ $message == *"major"* ]]; then
          echo "Incrementing Major versionDigit"
          declare -i nextmajordigit=${{ steps.versioninfo.outputs.lastmajordigit }}+1
          declare -i nextminordigit=0
          declare -i nextpatchdigit=0
          declare buildversion="v$nextmajordigit.$nextminordigit.$nextpatchdigit"
          declare buildversionpure="$nextmajordigit.$nextminordigit.$nextpatchdigit"
          declare buildversionfilename=$(echo "${buildversion//./_}")

        elif [[ $message == *"minor"* ]]; then
          echo "Incrementing Minor versionDigit"
          declare -i nextmajordigit=${{ steps.versioninfo.outputs.lastmajordigit }}
          declare -i nextminordigit=${{ steps.versioninfo.outputs.lastminordigit }}+1
          declare -i nextpatchdigit=0
          declare buildversion="v$nextmajordigit.$nextminordigit.$nextpatchdigit"
          declare buildversionpure="$nextmajordigit.$nextminordigit.$nextpatchdigit"
          declare buildversionfilename=$(echo "${buildversion//./_}")
        else
          echo "Incrementing Patch versionDigit"
          declare -i nextmajordigit=${{ steps.versioninfo.outputs.lastmajordigit }}
          declare -i nextminordigit=${{ steps.versioninfo.outputs.lastminordigit }}
          declare -i nextpatchdigit=${{ steps.versioninfo.outputs.lastpatchdigit }}+1
          declare buildversion="v$nextmajordigit.$nextminordigit.$nextpatchdigit"
          declare buildversionpure="$nextmajordigit.$nextminordigit.$nextpatchdigit"
          declare buildversionfilename=$(echo "${buildversion//./_}")
        fi
        echo "Building Version : $buildversion"
        echo "  Major          : $nextmajordigit"
        echo "  Minor          : $nextminordigit"
        echo "  Patch          : $nextpatchdigit"
        echo "Filename         : $buildversionfilename"
        echo "output variables to GitHub Actions"
        echo "nextmajordigit=$nextmajordigit" >> $GITHUB_OUTPUT
        echo "nextminordigit=$nextminordigit" >> $GITHUB_OUTPUT
        echo "nextpatchdigit=$nextpatchdigit" >> $GITHUB_OUTPUT
        echo "buildversion=$buildversion" >> $GITHUB_OUTPUT
        echo "buildversionpure=$buildversionpure" >> $GITHUB_OUTPUT
        echo "buildversionfilename=$buildversionfilename" >> $GITHUB_OUTPUT

     - name: Show Build info
       id: showbuildinfo
       run: |
        echo "Build Version   : ${{ steps.selectversion.outputs.buildversion }}"
        echo "Pure Version    : ${{ steps.selectversion.outputs.buildversionpure }}"
        echo "  Major         : ${{ steps.selectversion.outputs.nextmajordigit }}"
        echo "  Minor         : ${{ steps.selectversion.outputs.nextminordigit }}"
        echo "  Patch         : ${{ steps.selectversion.outputs.nextpatchdigit }}"
        echo "Build Filename  : ${{ steps.selectversion.outputs.buildversionfilename }}"
        echo "Build Timestamp : ${{ steps.versioninfo.outputs.buildtimestamp }}"
     - name: Create Release with Binary
       id: createrelease
       uses: softprops/action-gh-release@v2
       if: ${{ steps.versioninfo.outputs.branchname == 'main'}} # Only publish release on main branch
       with:
        tag_name: ${{ steps.selectversion.outputs.buildversion }}
        name: Release ${{ steps.selectversion.outputs.buildversion }}
        token: ${{secrets.GITHUB_TOKEN}}
        draft: false
        prerelease: false
        generate_release_notes: true
        files: .pio/build/production/firmware.bin
